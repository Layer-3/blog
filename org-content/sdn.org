#+HUGO_BASE_DIR: ../
#+TITLE: 软件定义网络 
#+DATE: 2020-03-22
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_TAGS: SDN Network 
#+HUGO_CATEGORIES: Study
#+HUGO_DRAFT: false

/软件定义网络即 SDN，是我一直以来想要研读的一个方向，在完成了 NSFC 的申请书之后，终于闲了一些，决定从头开始，先对 SDN 有个初步的了解，然后再深入进去，进行查缺补漏式的系统学习，以开展相应的研究和实验。目前第一步已经看完了 OpenFlow 的开山之作，具体可以看这篇[[https://www.ansont.cn/posts/openflow][博文]]，这篇博文主要是阅读 SDN 的一篇综述“Softwoare-Defined Networking: A Comprehensive Survey”的学习总结/


--- 
* 1. 为什么
在介绍 SDN 之前，需要先说明为什么需要 SDN，也就是现在的网络架构有什么问题？
- 传统的 IP 网络太=复杂=难以管理、配置和实施高层策略。（管理员要针对每个设备根据设备厂商的不同慢慢配置）
- 现有的网络在垂直层面是=紧耦合=的，也就是控制层和数据层是在交换机和路由器这些网络设备上绑定在一起的，这就很不 flexibility 了，并且这也让网络协议的更新换代变得十分困难。
 
SDN 为改变上面的问题，做了哪些工作呢？
- =分离=控制层与数据层，也就是把控制逻辑从转发流量的步骤中拿了出来。
- 网络中的路由器就只是简单的转发设备，而控制逻辑放在逻辑上中心化[fn:1]的控制设备上，也就简化了配置和迭代。

* 2. 介绍
** 2.1 网络的拆分
计算机网络可以被分为三层：
- 管理层：监测和配置管理层，*定义网络策略*；
- 控制层：表示管理数据层元素的转发表的协议，*实施(enforce)策略*；
- 数据层：用来转发数据，*通过转发相应的数据来执行(excutes)策略*。
 
#+attr_html: :width 300 
[[file:2._介绍/2020-03-23_22-02-16_screen-shoot.png]]

** 2.2 什么是 SDN
*** 2.2.1 基本构成
文章认为 SDN 的架构由四大支柱构成：
1. 控制与数据层分离；
2. 转发决策是基于 flow 的，而不是基于目的地址的。flow 这个抽象使得不同类型的网络设备（比如路由器、交换机、防火墙等）可以统一行为，极大的增加了灵活性（但可能受到流表=功能=上的限制？）；
3. 控制逻辑被移动到外部实体，被称之为 SDN Controller 或者 NOS[fn:2]，可以基于此抽象对转发设备进行编程；
4. 网络可以通过运行在 NOS(其与数据层设备交互) 之上的软件程序来进行编程。

*** 2.2.2 抽象的方法
通过抽象的方法可以帮助我们更好地理解计算机科学中的很多事物，SDN 也不例外。SDN 可以被认为是由三大抽象构成的：
- =Forwarding abstraction= ，可以类比于 OS 中的驱动，实现网络程序要求的各种转发行为；
- =Distribution abstraction= ，所有的分布式系统都依赖于网络，而实际上，网络本身就是个大的分布式系统，所以通过这个通用的 Distribution Layer（比如 NOS），来处理分布式系统中的状态，提供一个中心化的使用体验。具体来说需要具有两大功能：
  - 给转发设备安装控制指令(installing the control commands on the forwarding devices)；
  - 收集转发层(forwarding layer)层的状态信息，从而给网络应用提供一种全局的 view。
- =Specification abstraction= ，让网络应用可以表达它希望网络执行的行为而不用具体实现该行为。通过虚拟化或者编程语言的方式来实现，文章中说是把抽象的配置（configuration)映射到由 SDN 控制器暴露出来的全局网络的实际的物理配置上，(/这么看确实像程序语言干的事，此处未完全理解，存疑/)。

# #+attr_html: :width 400 
# [[file:2._介绍/2020-03-23_22-24-41_screen-shoot.png]]

#+attr_html: :width 400 
[[https://i.loli.net/2020/03/23/V6u9bo8CSU35TwD.png]]

***  2.2.3 术语定义
1. =Forwarding Devices(FD)=，用来执行的一些基本操作的数据层设备，其拥有一些实现定义好的指令集（比如转发到和端口之类的），这些指令集实际上由南向接口 southbound interfaces 定义的，并由 SDN 控制器安装在转发设备中以实现南向协议；
2. =Data Plane(DP)=，网络中的转发设备的集合就是一个数据层，这里的集合表示这些设备是通过无线或有线连接着的；
3. =Southbound Interface(SI)=，主要用来表示控制层与数据层之间的交互；
   - FD 中的指令集就是由南向 API 定义的，南向 API 是 SI 的一部分；
   - 定义控制层与 SD 之间的通信协议。
4. =Control Plane(CP)=，FD 是被 CP 通过 SI 实体来编程的，相当于是网络的大脑，所有的逻辑都在应用程序和控制器中，也就是在控制层中；
5. =Northbound Interface(NI)=，NOS 给 APP 开发者提供 API，这个 API 就是 NI，本质上，NI 通常对 SI 使用的底层的指令集进行抽象，来对 FD 进行编程；
6. =Management Plane(MP)=，利用 NI 提供的功能（函数）来实现网络控制和操作逻辑的应用程序集合，（包括路由、防火墙等等），管理程序定义策略，这些策略被最终翻译为南向的特定指令，来编程 FD 的行为。

* Software-defined Networks

* Footnotes

[fn:2] 一个运行在商品服务器技术上的软件平台，它基于逻辑上集中的抽象网络视图提供必要的资源和抽象，以促进转发设备的编程。

[fn:1] 说逻辑上中心化，是因为物理上大多是分布式实现的，因为中心化的控制设备会带来很多问题，比如单点故障、性能扩展性不佳等。
